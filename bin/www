#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var appHttp = require("../app");
var debug = require("debug")("swayeapi:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
var path = require("path");


var port = normalizePort(process.env.PORT || "5880");
var portHttp = normalizePort(process.env.HTTPS_PORT || "5881");
app.set("port", port);
appHttp.set("port", portHttp);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// var httpsServer = https.createServer(credentials, app);

var io = require("socket.io").listen(server);

require("./sockets/base")(io);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port, "10.10.10.86");
server.listen(port, "18.189.29.150");
// httpsServer.listen(process.env.HTTPS_PORT || "7011");
server.on("error", onError);
server.on("listening", onListening);



// Create HTTPS SERVER
const credentials = {
  key: fs.readFileSync(path.resolve(path.join(__dirname, "", 'vacationme.com.key')), 'utf-8'),
  cert: fs.readFileSync(path.resolve(path.join(__dirname, "", 'b3fa5e7e1a8ee3f1.crt')), 'utf-8'),
  ca: fs.readFileSync(path.resolve(path.join(__dirname, "", 'gd_bundle-g2-g1.crt')), 'utf-8')
};
var httpsServer = https.createServer(credentials, appHttp);
var io_https = require("socket.io").listen(httpsServer);
require("./sockets/base")(io_https);
/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(portHttp, "18.189.29.150");
// httpsServer.listen(portHttp, "10.10.10.86");
httpsServer.on("error", onErrorHttps);
httpsServer.on("listening", onListeningHttps);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHttps(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onListeningHttps() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}